{"version":3,"file":"static/js/294.bdff548d.chunk.js","mappings":"8QAEaA,EAAWC,EAAAA,EAAAA,KAAH,sFAORC,EAAeD,EAAAA,EAAAA,IAAH,uPAYZE,EAAYF,EAAAA,EAAAA,GAAH,qGAMTG,EAAiBH,EAAAA,EAAAA,EAAH,yD,kHCxBdI,EAAOJ,EAAAA,EAAAA,KAAH,wKAUJK,GAAYL,EAAAA,EAAAA,GAAOM,EAAAA,EAAPN,CAAH,2M,qLCiFtB,MAhFA,WACE,IAAMO,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,KAAdD,UAEFE,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,EAAAA,KACPG,SAAS,yBACTE,IAAI,EAAG,sDACPC,QAAQ,WAAY,8CAGnBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbP,MAAO,GACPE,SAAU,IAEZM,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAChB,IACEb,EAAYc,aAAaF,EAAQ,CAAEG,YAAY,GAKhD,CAJC,MAAOC,GACPA,EAAiBC,MAAMC,SAAQ,SAAAC,GAC7BN,EAAOM,EAAMC,MAAQD,EAAME,OAC5B,GACF,CAED,OAAOR,CACR,EACDS,SAAU,SAAAC,GACR3B,GAAS4B,EAAAA,EAAAA,IAAMD,IACff,EAAOiB,WACR,IAGH,OADFC,QAAQC,IAAI7B,IAER,UAAC,KAAD,YACE,SAAC,KAAD,oCACA,UAAC,KAAD,CAAUwB,SAAUd,EAAOoB,aAA3B,WACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,QAApB,oBACA,SAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,OACLC,GAAG,QACHC,KAAK,QACLC,MAAO7B,EAAOI,OAAOT,MACrBmC,SAAU9B,EAAO+B,aACjBC,OAAQhC,EAAOiC,WACfC,aAAa,KACbvB,MAAOX,EAAOmC,QAAQxC,OAASyC,QAAQpC,EAAOK,OAAOV,SAEtDK,EAAOmC,QAAQxC,OAASK,EAAOK,OAAOV,OACrC,SAAC,KAAD,UAAiBK,EAAOK,OAAOV,QAC7B,SAEN,UAAC0B,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,WAApB,uBACA,SAACC,EAAA,EAAD,CACEG,GAAG,WACHD,KAAK,WACLE,KAAK,WACLC,MAAO7B,EAAOI,OAAOP,SACrBc,MAAOX,EAAOmC,QAAQtC,UAAYuC,QAAQpC,EAAOK,OAAOR,UACxDiC,SAAU9B,EAAO+B,aACjBC,OAAQhC,EAAOiC,WACfC,aAAa,OAEdlC,EAAOmC,QAAQtC,UAAYG,EAAOK,OAAOR,UACxC,SAAC,KAAD,UAAiBG,EAAOK,OAAOR,WAC7B,SAEN,SAAC,IAAD,CAAW6B,KAAK,SAASW,SAAU/C,EAAnC,0BAMP,ECtFD,MAJA,WACE,OAAO,SAAC,EAAD,GACR,C","sources":["components/AuthForms/AuthForms.styled.jsx","components/ContactForm/ContactForm.styled.jsx","components/AuthForms/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const AuthForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n \n`;\n\nexport const AuthFormCard = styled.div`\n  display: block;\n  padding: 25px 35px 50px;\n  width: 450px;\n  border-radius: 4px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n`;\n\nexport const FormTitle = styled.h2`\ntext-align: center;\nmargin: 0 0 40px;\nfont-size: 24px;\nfont-weight: 300;\n`\nexport const AuthHelperText = styled.p`\n  color: rgba(80, 78, 78, 0.76);\n`;","import styled from \"@emotion/styled\";\nimport { Button } from \"@mui/material\";\n\nexport const Form = styled.form`\n    display: flex;\n    gap: 15px;\n    justify-content: start;\n    align-items: baseline;\n    margin-top: 40px;\n    margin-bottom: 40px;\n\n`\n\nexport const SubmitBtn = styled(Button)`\n  border: 1px solid;\n  border-color: #1f398786;\n  &:hover,\n  :active,\n  :focus {\n    border-color:rgba(3, 44, 84, 0.5);\n    box-shadow: 0 0 0 1px rgba(3, 44, 84, 0.5);\n  }\n`;","import { FormControl, Input, InputLabel } from '@mui/material';\nimport { SubmitBtn } from 'components/ContactForm/ContactForm.styled';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/authThunk';\nimport * as Yup from 'yup';\nimport {\n  AuthForm,\n  AuthFormCard,\n  AuthHelperText,\n  FormTitle,\n} from './AuthForms.styled';\nimport { useAuth } from 'hooks/useAuth';\n\nfunction LoginForm() {\n  const dispatch = useDispatch();\n  const { isLogging } = useAuth();\n\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n      .required('No password provided.')\n      .min(8, 'Password is too short - should be 8 chars minimum.')\n      .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validate: values => {\n      const errors = {};\n      try {\n        LoginSchema.validateSync(values, { abortEarly: false });\n      } catch (validationErrors) {\n        validationErrors.inner.forEach(error => {\n          errors[error.path] = error.message;\n        });\n      }\n\n      return errors;\n    },\n    onSubmit: user => {\n      dispatch(login(user));\n      formik.resetForm();\n    },\n  });\nconsole.log(isLogging)\n  return (\n    <AuthFormCard>\n      <FormTitle>Sign in to PhoneBook</FormTitle>\n      <AuthForm onSubmit={formik.handleSubmit}>\n        <FormControl>\n          <InputLabel htmlFor=\"email\">Email</InputLabel>\n          <Input\n            size=\"small\"\n            type=\"text\"\n            id=\"email\"\n            name=\"email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            autoComplete=\"on\"\n            error={formik.touched.email && Boolean(formik.errors.email)}\n          />\n          {formik.touched.email && formik.errors.email ? (\n            <AuthHelperText>{formik.errors.email}</AuthHelperText>\n          ) : null}\n        </FormControl>\n        <FormControl>\n          <InputLabel htmlFor=\"password\">Password</InputLabel>\n          <Input\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            value={formik.values.password}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            autoComplete=\"on\"\n          />\n          {formik.touched.password && formik.errors.password ? (\n            <AuthHelperText>{formik.errors.password}</AuthHelperText>\n          ) : null}\n        </FormControl>\n        <SubmitBtn type=\"submit\" disabled={isLogging}>\n          Sign in\n        </SubmitBtn>\n      </AuthForm>\n    </AuthFormCard>\n  );\n}\n\nexport default LoginForm;\n","import LoginForm from 'components/AuthForms/LoginForm';\n\nfunction LoginPage() {\n  return <LoginForm />;\n}\n\nexport default LoginPage;\n"],"names":["AuthForm","styled","AuthFormCard","FormTitle","AuthHelperText","Form","SubmitBtn","Button","dispatch","useDispatch","isLogging","useAuth","LoginSchema","Yup","shape","email","required","password","min","matches","formik","useFormik","initialValues","validate","values","errors","validateSync","abortEarly","validationErrors","inner","forEach","error","path","message","onSubmit","user","login","resetForm","console","log","handleSubmit","FormControl","InputLabel","htmlFor","Input","size","type","id","name","value","onChange","handleChange","onBlur","handleBlur","autoComplete","touched","Boolean","disabled"],"sourceRoot":""}