{"version":3,"file":"static/js/975.7ae781c4.chunk.js","mappings":"kOAGaA,EAAOC,EAAAA,EAAAA,KAAH,wKAUJC,GAAYD,EAAAA,EAAAA,GAAOE,EAAAA,EAAPF,CAAH,2M,yKCiGtB,MArGA,WACE,IAAMG,GAAWC,EAAAA,EAAAA,MAGXC,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACTC,QACC,4CACA,iCAEJC,MAAOP,EAAAA,KAAaO,MAAM,iBAAiBF,SAAS,YACpDG,SAAUR,EAAAA,KACPK,SAAS,yBACTF,IAAI,EAAG,sDACPG,QAAQ,WAAY,8CAGnBG,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbT,KAAM,GACNK,MAAO,GACPC,SAAU,IAEZI,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAChB,IACEf,EAAegB,aAAaF,EAAQ,CAAEG,YAAY,GAKnD,CAJC,MAAOC,GACPA,EAAiBC,MAAMC,SAAQ,SAAAC,GAC7BN,EAAOM,EAAMC,MAAQD,EAAME,OAC5B,GACF,CAED,OAAOR,CACR,EACDS,SAAU,SAAAC,GACR3B,GAAS4B,EAAAA,EAAAA,IAASD,IAClBf,EAAOiB,WACR,IAGH,OACE,UAAC,IAAD,CAAMH,SAAUd,EAAOkB,aAAvB,WACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,OAApB,mBACA,SAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,OACLC,GAAG,OACHhC,KAAK,OACLiC,MAAO1B,EAAOI,OAAOX,KACrBkC,SAAU3B,EAAO4B,aACjBC,OAAQ7B,EAAO8B,WACfC,aAAa,KACbpB,MAAOX,EAAOgC,QAAQvC,MAAQwC,QAAQjC,EAAOK,OAAOZ,QAErDO,EAAOgC,QAAQvC,MAAQO,EAAOK,OAAOZ,MACpC,yBAAMO,EAAOK,OAAOZ,OAClB,SAEN,UAAC0B,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,QAApB,oBACA,SAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,OACLC,GAAG,QACHhC,KAAK,QACLiC,MAAO1B,EAAOI,OAAON,MACrB6B,SAAU3B,EAAO4B,aACjBC,OAAQ7B,EAAO8B,WACfC,aAAa,KACbpB,MAAOX,EAAOgC,QAAQlC,OAASmC,QAAQjC,EAAOK,OAAOP,SAEtDE,EAAOgC,QAAQlC,OAASE,EAAOK,OAAOP,OACrC,yBAAME,EAAOK,OAAOP,QAClB,SAEN,UAACqB,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,WAApB,uBACA,SAACC,EAAA,EAAD,CACEG,GAAG,WACHD,KAAK,WACL/B,KAAK,WACLiC,MAAO1B,EAAOI,OAAOL,SACrBY,MAAOX,EAAOgC,QAAQjC,UAAYkC,QAAQjC,EAAOK,OAAON,UACxD4B,SAAU3B,EAAO4B,aACjBC,OAAQ7B,EAAO8B,WACfC,aAAa,OAEd/B,EAAOgC,QAAQjC,UAAYC,EAAOK,OAAON,UACxC,yBAAMC,EAAOK,OAAON,WAClB,SAEN,SAAC,IAAD,CAAWyB,KAAK,SAAhB,2BAGL,ECtGD,MAJA,WACE,OAAO,SAAC,EAAD,GACR,C","sources":["components/ContactForm/ContactForm.styled.jsx","components/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { Button } from \"@mui/material\";\n\nexport const Form = styled.form`\n    display: flex;\n    gap: 15px;\n    justify-content: start;\n    align-items: baseline;\n    margin-top: 40px;\n    margin-bottom: 40px;\n\n`\n\nexport const SubmitBtn = styled(Button)`\n  border: 1px solid;\n  border-color: #1f398786;\n  &:hover,\n  :active,\n  :focus {\n    border-color:rgba(3, 44, 84, 0.5);\n    box-shadow: 0 0 0 1px rgba(3, 44, 84, 0.5);\n  }\n`;","import React from 'react';\nimport { FormControl, Input, InputLabel } from '@mui/material';\nimport { SubmitBtn } from 'components/ContactForm/ContactForm.styled';\nimport { useFormik } from 'formik';\nimport { Form } from './ContactForm/ContactForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authThunk';\n\nfunction RegisterForm() {\n  const dispatch = useDispatch();\n\n\n  const RegisterSchema = Yup.object().shape({\n    name: Yup.string()\n      .min(3, 'Too Short!')\n      .max(50, 'Too Long!')\n      .required('Required')\n      .matches(\n        /^[a-zA-Zа-яА-Я\\s'-]+$/,\n        'Name can only contain letters'\n      ),\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n      .required('No password provided.')\n      .min(8, 'Password is too short - should be 8 chars minimum.')\n      .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validate: values => {\n      const errors = {};\n      try {\n        RegisterSchema.validateSync(values, { abortEarly: false });\n      } catch (validationErrors) {\n        validationErrors.inner.forEach(error => {\n          errors[error.path] = error.message;\n        });\n      }\n\n      return errors;\n    },\n    onSubmit: user => {\n      dispatch(register(user))\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <FormControl>\n        <InputLabel htmlFor=\"name\">Name</InputLabel>\n        <Input\n          size=\"small\"\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          autoComplete=\"on\"\n          error={formik.touched.name && Boolean(formik.errors.name)}\n        />\n        {formik.touched.name && formik.errors.name ? (\n          <div>{formik.errors.name}</div>\n        ) : null}\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"email\">Email</InputLabel>\n        <Input\n          size=\"small\"\n          type=\"text\"\n          id=\"email\"\n          name=\"email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          autoComplete=\"on\"\n          error={formik.touched.email && Boolean(formik.errors.email)}\n        />\n        {formik.touched.email && formik.errors.email ? (\n          <div>{formik.errors.email}</div>\n        ) : null}\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"password\">Password</InputLabel>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          name=\"password\"\n          value={formik.values.password}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          autoComplete=\"on\"\n        />\n        {formik.touched.password && formik.errors.password ? (\n          <div>{formik.errors.password}</div>\n        ) : null}\n      </FormControl>\n      <SubmitBtn type=\"submit\">Add contact</SubmitBtn>\n    </Form>\n  );\n}\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm';\n\nfunction RegisterPage() {\n  return <RegisterForm />;\n}\n\nexport default RegisterPage;\n"],"names":["Form","styled","SubmitBtn","Button","dispatch","useDispatch","RegisterSchema","Yup","shape","name","min","max","required","matches","email","password","formik","useFormik","initialValues","validate","values","errors","validateSync","abortEarly","validationErrors","inner","forEach","error","path","message","onSubmit","user","register","resetForm","handleSubmit","FormControl","InputLabel","htmlFor","Input","size","type","id","value","onChange","handleChange","onBlur","handleBlur","autoComplete","touched","Boolean"],"sourceRoot":""}